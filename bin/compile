#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>

# Fail fast and fail hard.
#set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

echo "Bin Dir: $BIN_DIR"
echo "Root Dir: $ROOT_DIR"
echo "Cache Directory: $CACHE_DIR"
echo "Build Directory: $BUILD_DIR"
echo "Env Dir: $ENV_DIR"

# Functions
# Syntax sugar.
indent() {
  sed "s/^/       /"
}

# Buildpack Steps.
puts-step() {
  echo "-----> $@"
}

# Buildpack Warnings.
puts-warn() {
  echo " !     $@"
}

# Usage: $ set-env key value
set-env() {
  echo "export $1=$2" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
set-default-env() {
  echo "export $1=\${$1:-$2}" >> $PROFILE_PATH
}

# Usage: $ set-default-env key value
un-set-env() {
  echo "unset $1" >> $PROFILE_PATH
}

# Where to store the Pip download cache.
CACHED_DIRS=".heroku"

# Prepend proper path buildpack use.
#export PATH=$BUILD_DIR/.heroku/python/bin:$BUILD_DIR/.heroku/vendor/bin:$PATH

# Restore old artifacts from the cache.
for dir in $CACHED_DIRS; do
  echo $dir
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done


puts-step "Preparing SWIG 2.0.5"

# Install SWIG
if [ ! -d $CACHE_DIR/swig ]; then
  echo "Not found in cache - installing"
  cd $BUILD_DIR
  SOURCE_TARBALL='https://s3.amazonaws.com/p22-heroku-buildpacks/libraries/swig.tar.gz'
  puts-step "Fetching and installing SWIG 2 from $SOURCE_TARBALL"
  curl -L $SOURCE_TARBALL | tar xzvf >/dev/null 2>&1
  puts-step "Installing SWIG..."
  mv swig $CACHE_DIR/swig
  rm swig.tar.gz
  echo "SWIG installed" | indent
fi
puts-step "Making .paybox folder and copying source"
mkdir -p .paybox
cp -R $CACHE_DIR/swig .paybox
echo "Updating path" | indent
PATH=$PATH:$BUILD_DIR/.paybox/swig/bin/
export PATH
echo "Setting SWIG_LIB environment variable" | indent
export SWIG_LIB=$BUILD_DIR/.paybox/swig/share/swig/2.0.5/
echo $PATH
puts-step "SWIG Complile Complete"
